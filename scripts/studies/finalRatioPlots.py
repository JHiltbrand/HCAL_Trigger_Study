# Pull raw histograms from root files generated by ratioStudyPlotter and make final plots

# An example call would be:
# python studies/finalRatioPlots.py --pfaY subpath/to/nominal --pfaX1 subpath/to/new

# Here the subpath is assumed to start in nobackup/HCAL_Trigger_Study/input/Ratios/

import sys, os, ROOT, argparse

ROOT.TH1.SetDefaultSumw2()
ROOT.TH2.SetDefaultSumw2()
ROOT.gROOT.SetBatch(True)
ROOT.gStyle.SetOptStat("")
ROOT.gStyle.SetPaintTextFormat("3.2f")
ROOT.gStyle.SetFrameLineWidth(2)
ROOT.gStyle.SetEndErrorSize(0)

# The makeBandGraph method takes three TH1s where histoUp and histoDown
# would make an envelope around histoNominal. An optional color for the 
# band is passable
def makeBandGraph(histoUp, histoDown, histoNominal, color):
    
    npoints = histoUp.GetNbinsX()

    graphBand = ROOT.TGraphAsymmErrors(npoints)

    for iPoint in xrange(0, npoints):

        upErr = histoUp.GetBinContent(iPoint+1) - histoNominal.GetBinContent(iPoint+1)
        downErr = histoNominal.GetBinContent(iPoint+1) - histoDown.GetBinContent(iPoint+1)

        if iPoint == 28:
            graphBand.SetPoint(iPoint,      histoNominal.GetBinCenter(iPoint+1),       (histoNominal.GetBinContent(iPoint)+histoNominal.GetBinContent(iPoint+2))/2)
            graphBand.SetPointError(iPoint, histoNominal.GetBinWidth(1)/2, histoNominal.GetBinWidth(1)/2, 0, 0)

        graphBand.SetPoint(iPoint, histoNominal.GetBinCenter(iPoint+1), histoNominal.GetBinContent(iPoint+1))
        graphBand.SetPointError(iPoint, histoNominal.GetBinWidth(1)/2, histoNominal.GetBinWidth(1)/2, downErr, upErr)

    graphBand.SetFillColorAlpha(color, 1.0)

    return graphBand

# A little helper function to set axis label, title sizes and offsets
def setAxisDims(histo, xLabelSize, yLabelSize, zLabelSize, xTitleSize, yTitleSize, zTitleSize, xOffset, yOffset, zOffset):

    histo.GetXaxis().SetLabelSize(xLabelSize); histo.GetXaxis().SetTitleSize(xTitleSize); histo.GetXaxis().SetTitleOffset(xOffset)
    histo.GetYaxis().SetLabelSize(yLabelSize); histo.GetYaxis().SetTitleSize(yTitleSize); histo.GetYaxis().SetTitleOffset(yOffset)
    
    try:
        histo.GetZaxis().SetLabelSize(zLabelSize); histo.GetZaxis().SetTitleSize(zTitleSize); histo.GetZaxis().SetTitleOffset(zOffset)
    except:
        return

# A helper function to set all three axis ranges
def setAxisRanges(histo, xMin = -1, xMax = -1, yMin = -1, yMax = -1, zMin = -1, zMax = -1):

    if xMin != xMax: histo.GetXaxis().SetRangeUser(xMin, xMax)
    if yMin != yMax: histo.GetYaxis().SetRangeUser(yMin, yMax)
    if zMin != zMax: histo.GetZaxis().SetRangeUser(zMin, zMax)

# A function to set some TH1 options
def set1Doptions(histo, fillColor = -1, lineColor = ROOT.kBlack, markerColor = ROOT.kBlack, lineStyle = 1, markerStyle = 20, lineWidth = 5, markerSize = 3, normalize = False):

    histo.SetLineColor(lineColor)
    histo.SetLineStyle(lineStyle)
    histo.SetLineWidth(lineWidth)

    histo.SetMarkerColor(markerColor)
    histo.SetMarkerStyle(markerStyle)
    histo.SetMarkerSize(markerSize)

    if fillColor != -1: histo.SetFillColor(fillColor)

    if normalize: histo.Scale(1.0/histo.Integral())

# A function to set some TH2 options
def set2Doptions(histo, contour = 255):

    if "TH2" not in histo.ClassName(): return

    histo.SetContour(255)

def prettyText(text, color, algoName, mean, stddev):

    text.SetFillColor(ROOT.kWhite);
    text.SetTextAlign(11)
    text.AddText(algoName)
    text.AddText("#mu = %3.2f"%(mean))
    text.AddText("#sigma = %3.2f"%(stddev))
    text.SetTextAlign(11)
    text.SetTextFont(63)
    text.SetTextSize(72)
    text.SetTextColor(color)

# The fillMap method has inputs pfaKey which will be a key in a dictionary and inRootDir which is a path to 
# histogram files
def fillMap(pfaKey, inRootDir):

    if "NULL" in inRootDir: return

    MAPPFAHISTOS[pfaKey] = {}

    for histoFile in os.listdir(inRootDir):

       if ".root" not in histoFile: continue
       histoFile = ROOT.TFile.Open(inRootDir + "/" + histoFile, "READ")
       for hkey in histoFile.GetListOfKeys():
           if "TH" not in hkey.GetClassName(): continue

           name = hkey.GetName()
           histo = hkey.ReadObj()
           histo.SetDirectory(0)
           histo.SetName(name + "_" + pfaKey)
           ROOT.SetOwnership(histo, False)

           histo.Sumw2()
           
           if name in MAPPFAHISTOS[pfaKey].keys(): MAPPFAHISTOS[pfaKey][name].Add(histo)
           else: MAPPFAHISTOS[pfaKey][name] = histo

# The draw2DHistoAndProfile takes in a host canvas, a key to a dictionary, a histogram name
# and some histogram style options. Using the key and histogram name, the method pulls the 2D
# histo from the master dictionary MAPPFAHISTOS. From there a profile is made from the 2D.
# The 2D and profile are made a little prettier and the error band around the profile is drawn if requested
def draw2DHistoAndProfile(canvas, histo, histoUp, histoDown, zMax, color, markerStyle, drewRatio):

    if histo == 0: return False

    pPFAX = histo.ProfileX("p_%s_%d"%(histo.GetName(),histo.GetUniqueID()), 1, -1, ""); ROOT.SetOwnership(pPFAX, False); pPFAX.Sumw2()

    if histoUp != 0 and histoDown != 0:
        set1Doptions(pPFAX, lineWidth = 1, markerColor = ROOT.kBlack, lineColor = ROOT.kBlack, markerStyle = markerStyle, markerSize = 2)
    else:
        set1Doptions(pPFAX, lineWidth = 0, markerColor = color, markerStyle = markerStyle)

    setAxisDims(histo, 0.059, 0.059, 0.059, 0.072, 0.072, 0.072, 0.95, 0.72, 1.0)

    canvas.cd()

    # Set some visual options for the actual 2D histogram
    if not drewRatio:
        setAxisRanges(histo, yMin = 0.1, yMax = 2.0, zMin = 1, zMax = zMax)

        if "ET_" in histo.GetName(): setAxisRanges(histo, xMin = 0, xMax = 30)
        if "r4"  in histo.GetName(): setAxisRanges(histo, yMin = 0, yMax = 1.1)

        set2Doptions(histo, contour = 255)
        histo.Draw("COLZ")

        drewRatio = True

    pPFAX.Draw("EP SAME")

    # If both and up and down variation of the variable are provided, make an uncertainty band 
    if histoUp != 0 and histoDown != 0:

        gPFAXBand = 0

        pPFAXUp   = histoUp.ProfileX("p_%s_%d"%(histoUp.GetName(),histoUp.GetUniqueID()), 1, -1, "");       pPFAXUp.Sumw2()
        pPFAXDown = histoDown.ProfileX("p_%s_%d"%(histoDown.GetName(),histoDown.GetUniqueID()), 1, -1, ""); pPFAXDown.Sumw2()

        gPFAXBand = makeBandGraph(pPFAXUp, pPFAXDown, pPFAX, color)

        set1Doptions(gPFAXBand, lineWidth=3, lineColor=color, markerSize = 0)
           
        if gPFAXBand:
            ROOT.SetOwnership(gPFAXBand, False)
            gPFAXBand.Draw("2SAME")

    pPFAX.Draw("EP SAME")

    first = histo.GetXaxis().GetBinLowEdge(histo.GetXaxis().GetFirst()); last = histo.GetXaxis().GetBinUpEdge(histo.GetXaxis().GetLast())

    return drewRatio, first, last

# The method for 1D histos is the draw1DHisto method. Here the 1D histogram
# is prettied up and added to a THStack. In addition, we use parameters of the 1D
# histogram to make a custom TPaveText and return it.
def draw1DHisto(theStack, histo, histoUp, histoDown, schemeName, color, lineStyle, x1, y1, x2, y2):

    mean   = histo.GetMean()
    stddev = histo.GetStdDev()

    stddevUp = 0.; stddevDown = 0.;
    if histoUp != 0 and histoDown != 0:
        stddevUp = histoUp.GetStdDev()
        stddevDown = histoDown.GetStdDev()

    setAxisDims(histo, 0.042, 0.042, 0.042, 0.052, 0.052, 0.052, 1.06, 1.2, 1.0)
    set1Doptions(histo, lineColor = color, lineStyle = lineStyle, markerSize = 0, normalize = True)

    theStack.Add(histo)
    theStack.GetXaxis().SetTitle(histo.GetXaxis().GetTitle())
    theStack.GetYaxis().SetTitle(histo.GetYaxis().GetTitle())

    someTextPFAX = ROOT.TPaveText(x1, y1, x2, y2, "trNDC")
    prettyText(someTextPFAX, color, schemeName, mean, stddev)

    return someTextPFAX, stddev, stddevUp, stddevDown, mean

if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument("--tag"      , dest="tag"      , type=str, default=""    , help="Unique tag for output")
    parser.add_argument("--pfaY"     , dest="pfaY"     , type=str, default="NULL", help="Subpath to inputs for PFAY")
    parser.add_argument("--pfaX1"    , dest="pfaX1"    , type=str, default="NULL", help="Subpath to other PFAX dir") 
    parser.add_argument("--pfaX2"    , dest="pfaX2"    , type=str, default="NULL", help="Subpath to other PFAX dir") 
    parser.add_argument("--pfaX1Err" , dest="pfaX1Err" , default=False, action="store_true", help="Draw error bands for PFAX") 
    parser.add_argument("--pfaX2Err" , dest="pfaX2Err" , default=False, action="store_true", help="Draw error bands for PFAX") 
    args = parser.parse_args()

    tag = args.tag
    
    MAPPFAHISTOS = {}

    # Figure out the stub to use for the output directory
    # If neither pfaX1 or pfaX2 have been specified then quit!
    if   args.pfaX1 != "NULL": stub = args.pfaX1.split("Ratios/")[-1]
    elif args.pfaX2 != "NULL": stub = args.pfaX2.split("Ratios/")[-1]
    else: quit()

    HOME = os.getenv("HOME")
    OUTBASE  = "%s/nobackup/HCAL_Trigger_Study/plots/Ratios"%(HOME)
    INPUTLOC = "%s/nobackup/HCAL_Trigger_Study/input/Ratios"%(HOME)

    # Save the input directories provided and fill the map of histos
    fillMap("PFAY" , INPUTLOC + "/" + args.pfaY)
    fillMap("PFAX1", INPUTLOC + "/" + args.pfaX1)
    fillMap("PFAX2", INPUTLOC + "/" + args.pfaX2)

    # If we want the error bands, add those histograms to the map as well
    if args.pfaX1Err:
        fillMap("PFAX1Up"  , INPUTLOC + "/" + args.pfaX1 + "_UP"  )
        fillMap("PFAX1Down", INPUTLOC + "/" + args.pfaX1 + "_DOWN")
    if args.pfaX2Err:              
        fillMap("PFAX2Up"  , INPUTLOC + "/" + args.pfaX2 + "_UP"  )
        fillMap("PFAX2Down", INPUTLOC + "/" + args.pfaX2 + "_DOWN")
       
    # Set up the output directory and make it if it does not exist
    outpath = "%s/%s/%s"%(OUTBASE,stub,tag)
    if not os.path.exists(outpath): os.makedirs(outpath)

    pfaX1resHistLow = ROOT.TGraphAsymmErrors(28)
    pfaX2resHistLow = ROOT.TGraphAsymmErrors(28)
    pfaYresHistLow  = ROOT.TGraphAsymmErrors(28)

    pfaX1resHistHigh = ROOT.TGraphAsymmErrors(28)
    pfaX2resHistHigh = ROOT.TGraphAsymmErrors(28)
    pfaYresHistHigh  = ROOT.TGraphAsymmErrors(28)

    pfaResHistDummy  = ROOT.TH1F("pfaResHistDummy", ";|i#eta|;#sigma(online / offline)", 28, 0.5, 28.5)
    setAxisDims(pfaResHistDummy, 0.059, 0.059, 0.059, 0.072, 0.072, 0.072, 0.85, 0.85, 1.0)
    setAxisRanges(pfaResHistDummy, yMin = 0.0, yMax = 0.7)

    # Save the final histograms
    mapNameToHisto = MAPPFAHISTOS.values()[0]
    for name in mapNameToHisto.keys():

        className = mapNameToHisto[name].ClassName()

        if "TH2" in className:

            ROOT.gStyle.SetErrorX(0.5)

            zMax = 8e4
            
            c1 = ROOT.TCanvas("%s"%(name), "%s"%(name), 2400, 1440); c1.cd(); c1.SetLogz()

            ROOT.gPad.SetTopMargin(0.026)
            ROOT.gPad.SetBottomMargin(0.15)
            ROOT.gPad.SetLeftMargin(0.11)
            ROOT.gPad.SetRightMargin(0.12)

            drewRatio = False
            hPFAX1 = 0; hPFAX1Up = 0; hPFAX1Down = 0;
            hPFAX2 = 0; hPFAX2Up = 0; hPFAX2Down = 0;
            hPFAY = 0; first = 0; last = 0
            if "PFAX1" in MAPPFAHISTOS:

                if name not in MAPPFAHISTOS["PFAX1"]: continue

                hPFAX1 = MAPPFAHISTOS["PFAX1"][name]
                color = ROOT.kBlack
                if args.pfaX1Err:
                    hPFAX1Up   = MAPPFAHISTOS["PFAX1Up"][name]
                    hPFAX1Down = MAPPFAHISTOS["PFAX1Down"][name]
                    color = ROOT.kGray+2
                 
                drewRatio, first, last = draw2DHistoAndProfile(c1, hPFAX1, hPFAX1Up, hPFAX1Down, zMax, color, 20, drewRatio)

            if "PFAX2" in MAPPFAHISTOS:

                if name not in MAPPFAHISTOS["PFAX2"]: continue

                hPFAX2 = MAPPFAHISTOS["PFAX2"][name]
                if args.pfaX2Err:
                    hPFAX2Up   = MAPPFAHISTOS["PFAX2Up"][name]
                    hPFAX2Down = MAPPFAHISTOS["PFAX2Down"][name]

                drewRatio, first, last = draw2DHistoAndProfile(c1, hPFAX2, hPFAX2Up, hPFAX2Down, zMax, ROOT.kRed, 20, drewRatio)

            if "PFAY"  in MAPPFAHISTOS:

                if name not in MAPPFAHISTOS["PFAY"]: continue

                hPFAY = MAPPFAHISTOS["PFAY"][name]
                drewRatio, first, last = draw2DHistoAndProfile(c1, hPFAY, 0, 0, zMax, ROOT.kBlack, 4, drewRatio)

            l = ROOT.TLine(first, 1, last, 1) 
            l.SetLineWidth(3)
            l.SetLineColor(ROOT.kBlack)
            l.SetLineStyle(2)
            l.DrawLine(first, 1, last, 1)
    
            c1.SaveAs("%s/%s.pdf"%(outpath,name))

        # 1D histos assumed to be a distribution of a user variable for a given ieta
        elif "TH1" in className:

            c1 = ROOT.TCanvas("%s"%(name), "%s"%(name), 1600, 1600); c1.cd(); c1.SetGridy(); c1.SetGridx()

            ROOT.gPad.SetTopMargin(0.02)
            ROOT.gPad.SetBottomMargin(0.12)
            ROOT.gPad.SetLeftMargin(0.14)
            ROOT.gPad.SetRightMargin(0.02)

            t_pfaX1 = 0; t_pfaX2 = 0; t_pfaY = 0
            hPFAX1Up = 0; hPFAX1Down = 0;
            hPFAX2Up = 0; hPFAX2Down = 0;
            theStack = ROOT.THStack("theStack_%s"%(name), ""); theStack.Draw()

            ietaList = name.split("ieta")[-1].split("_")[0].split("to"); ieta = int(ietaList[0])
            skipRes = False; ietaStr = ""
            if len(ietaList) > 1:
                skipRes = True
                ietaStr = "%s to %s"%(ietaList[0],ietaList[1])
            else:
                ietaStr = "%s"%(ietaList[0])

            schemeStubX1 = "PFA" + args.pfaX1.split("PFA")[-1].split("_")[0]
            schemeStubX2 = "PFA" + args.pfaX2.split("PFA")[-1].split("_")[0]
            schemeStubY  = "PFA" + args.pfaY.split("PFA")[-1].split("_")[0]

            splitName = name.split("_")
            etBinLow  = "RHET0.0to10.0"  in str(splitName[1]) and "TPRH" in str(splitName[0])
            etBinHigh = "RHET10.0to1000" in str(splitName[1]) and "TPRH" in str(splitName[0])
            
            pfaX1res = 0;     pfaX2res = 0;     pfaYres = 0
            pfaX1resUp = 0;   pfaX2resUp = 0;   pfaYresUp = 0
            pfaX1resDown = 0; pfaX2resDown = 0; pfaYresDown = 0
            if "PFAX1" in MAPPFAHISTOS:
                if name not in MAPPFAHISTOS["PFAX1"]: continue

                hPFAX1 = MAPPFAHISTOS["PFAX1"][name]
                if args.pfaX1Err:
                    hPFAX1Up   = MAPPFAHISTOS["PFAX1Up"][name]
                    hPFAX1Down = MAPPFAHISTOS["PFAX1Down"][name]

                t_pfaX1, pfaX1res, pfaX1resUp, pfaX1resDown, pfaX1mean = draw1DHisto(theStack, hPFAX1, hPFAX1Up, hPFAX1Down, schemeStubX1, ROOT.kBlack, 1, 0.75, 0.52, 0.92, 0.67)
                if not skipRes:
                    errLow = pfaX1res-pfaX1resDown; errHigh = pfaX1resUp-pfaX1res
                    if not args.pfaX1Err:
                        errLow = 0.
                        errHigh = 0.

                    if errLow < 0. and errHigh > 0. or errLow > 0. and errHigh < 0.:
                        if abs(errLow) >= abs(errHigh): errHigh = 0.
                        else: errLow = 0.

                    if etBinLow:
                        print  pfaX1res, pfaX1resUp, pfaX1resDown

                        pfaX1resHistLow.SetPoint(ieta-1, ieta, pfaX1res)
                        pfaX1resHistLow.SetPointError(ieta-1, pfaResHistDummy.GetBinWidth(1)/2, pfaResHistDummy.GetBinWidth(1)/2, 1*(errLow), 1*(errHigh))

                    elif etBinHigh:
                        pfaX1resHistHigh.SetPoint(ieta-1, ieta, pfaX1res)
                        pfaX1resHistHigh.SetPointError(ieta-1, pfaResHistDummy.GetBinWidth(1)/2, pfaResHistDummy.GetBinWidth(1)/2, 1*(errLow), 1*(errHigh))

            if "PFAX2" in MAPPFAHISTOS:
                if name not in MAPPFAHISTOS["PFAX2"]: continue

                hPFAX2 = MAPPFAHISTOS["PFAX2"][name]
                if args.pfaX2Err:
                    hPFAX2Up   = MAPPFAHISTOS["PFAX2Up"][name]
                    hPFAX2Down = MAPPFAHISTOS["PFAX2Down"][name]

                t_pfaX2, pfaX2res, pfaX2resUp, pfaX2resDown, pfaX2mean = draw1DHisto(theStack, hPFAX2, hPFAX2Up, hPFAX2Down, schemeStubX2, ROOT.kRed, 1, 0.75, 0.34, 0.92, 0.49)
                if not skipRes:
                    errLow = pfaX2res-pfaX2resDown; errHigh = pfaX2resUp-pfaX2res
                    if not args.pfaX2Err:
                        errLow = 0.
                        errHigh = 0.

                    if errLow < 0. and errHigh > 0. or errLow > 0. and errHigh < 0.:
                        if abs(errLow) >= abs(errHigh): errHigh = 0.
                        else: errLow = 0.

                    if etBinLow:
                        pfaX2resHistLow.SetPoint(ieta-1, ieta, pfaX2res)
                        pfaX2resHistLow.SetPointError(ieta-1, pfaResHistDummy.GetBinWidth(1)/2, pfaResHistDummy.GetBinWidth(1)/2, 1*(errLow), 1*(errHigh))

                    elif etBinHigh:
                        pfaX2resHistHigh.SetPoint(ieta-1, ieta, pfaX2res)
                        pfaX2resHistHigh.SetPointError(ieta-1, pfaResHistDummy.GetBinWidth(1)/2, pfaResHistDummy.GetBinWidth(1)/2, 1*(errLow), 1*(errHigh))

            if "PFAY"  in MAPPFAHISTOS:
                if name not in MAPPFAHISTOS["PFAY"]: continue

                hPFAY = MAPPFAHISTOS["PFAY"][name]
                t_pfaY, pfaYres, pfaYresUp, pfaYresDown, pfaYmean  = draw1DHisto(theStack, hPFAY, 0, 0, schemeStubY, ROOT.kGray+2, 1, 0.75, 0.70, 0.92, 0.85)
                if not skipRes:

                    if etBinLow:
                        pfaYresHistLow.SetPoint(ieta-1, ieta, pfaYres)
                        pfaYresHistLow.SetPointError(ieta-1, pfaResHistDummy.GetBinWidth(1)/2, pfaResHistDummy.GetBinWidth(1)/2,  0, 0)

                    elif etBinHigh:
                        pfaYresHistHigh.SetPoint(ieta-1, ieta, pfaYres)
                        pfaYresHistHigh.SetPointError(ieta-1, pfaResHistDummy.GetBinWidth(1)/2, pfaResHistDummy.GetBinWidth(1)/2, 0, 0)

            ietaText = ROOT.TPaveText(0.72, 0.86, 0.92, 0.95, "trNDC")
            ietaText.SetFillColor(ROOT.kWhite); ietaText.SetTextAlign(11); ietaText.SetTextFont(63); ietaText.SetTextSize(80)
            ietaText.AddText("|i#eta| = %s"%(ietaStr))

            setAxisDims(theStack, 0.042, 0.042, 0.042, 0.052, 0.052, 0.052, 1.06, 1.4, 1.0)
            setAxisRanges(theStack, xMin = 0.23, xMax = 2.98)

            theStack.Draw("HIST NOSTACK")

            ietaText.Draw("SAME")
            if t_pfaX1 != 0: t_pfaX1.Draw("SAME")
            if t_pfaX2 != 0: t_pfaX2.Draw("SAME")
            if t_pfaY  != 0: t_pfaY.Draw("SAME")

            c1.SaveAs("%s/%s.pdf"%(outpath,name))

    # Now do resolution plots
    ROOT.gStyle.SetErrorX(0.5)

    canvases = []
    canvases.append(ROOT.TCanvas("pfa_res_low", "pfa_res_low", 2400, 1440))
    canvases.append(ROOT.TCanvas("pfa_res_high", "pfa_res_high", 2400, 1440))

    # Low ET bin is i == 0 and high ET bin is i == 1
    for i in xrange(len(canvases)):

        pfaYtext = ""; pfaX1text = ""; pfaX2text = ""
        pfaYgraph = 0; pfaX1graph = 0; pfaX2graph = 0

        # Case for low ET bin
        if i == 0: pfaYgraph = pfaYresHistLow;  pfaX1graph = pfaX1resHistLow;  pfaX2graph = pfaX2resHistLow
        if i == 1: pfaYgraph = pfaYresHistHigh; pfaX1graph = pfaX1resHistHigh; pfaX2graph = pfaX2resHistHigh

        canvases[i].cd(); canvases[i].SetGridy(); canvases[i].SetGridx()
        ROOT.gPad.SetTopMargin(0.03)
        ROOT.gPad.SetBottomMargin(0.14)
        ROOT.gPad.SetLeftMargin(0.13)
        ROOT.gPad.SetRightMargin(0.03)
       
        pfaResHistDummy.Draw("")

        iamTextX1 = ROOT.TPaveText(0.7, 0.69, 0.8, 0.75, "trNDC"); iamTextX1.SetFillColor(ROOT.kWhite); iamTextX1.SetTextAlign(12); iamTextX1.SetTextFont(63); iamTextX1.SetTextSize(90)
        if "PFAX1" in MAPPFAHISTOS:

            drawOption = ""
            if args.pfaX1Err:
                set1Doptions(pfaX1graph, lineWidth = 1, fillColor = ROOT.kGray+2, lineColor = ROOT.kGray+2, markerSize = 4, markerColor = ROOT.kBlack)
                drawOption = "P2SAME"
                
            else:
                set1Doptions(pfaX1graph, lineWidth = 3, lineColor = ROOT.kBlack, markerSize = 4, markerColor = ROOT.kBlack)
                drawOption = "PSAME"

            iamTextX1.AddText("PFA" + args.pfaX1.split("PFA")[-1].split("_")[0])
            iamTextX1.SetTextColor(ROOT.kBlack)

            pfaX1graph.Draw(drawOption)
            iamTextX1.Draw("SAME")

        iamTextX2 = ROOT.TPaveText(0.7, 0.78, 0.8, 0.84, "trNDC"); iamTextX2.SetFillColor(ROOT.kWhite); iamTextX2.SetTextAlign(12); iamTextX2.SetTextFont(63); iamTextX2.SetTextSize(90)
        if "PFAX2" in MAPPFAHISTOS:

            drawOption = ""
            if args.pfaX2Err:
                set1Doptions(pfaX2graph, lineWidth = 1, fillColor = ROOT.kRed, lineColor = ROOT.kBlack, markerSize = 3, markerColor = ROOT.kBlack)
                drawOption = "P2SAME"
            else:
                set1Doptions(pfaX2graph, lineWidth = 3, lineColor = ROOT.kRed, markerSize = 4, markerColor = ROOT.kRed) 
                drawOption = "PSAME"

            iamTextX2.AddText("PFA" + args.pfaX2.split("PFA")[-1].split("_")[0])
            iamTextX2.SetTextColor(ROOT.kRed)

            pfaX2graph.Draw(drawOption)
            pfaX2graph.Draw("PSAME")
            iamTextX2.Draw("SAME")

        iamTextY = ROOT.TPaveText(0.7, 0.87, 0.8, 0.93, "trNDC"); iamTextY.SetFillColor(ROOT.kWhite); iamTextY.SetTextAlign(12); iamTextY.SetTextFont(63); iamTextY.SetTextSize(90)
        if "PFAY"  in MAPPFAHISTOS:
            set1Doptions(pfaYgraph, lineWidth = 3, lineColor = ROOT.kGray+2, markerSize = 4, markerColor = ROOT.kGray+2)
            iamTextY.AddText("PFA" + args.pfaY.split("PFA")[-1].split("_")[0])
            iamTextY.SetTextColor(ROOT.kGray+2)

            pfaYgraph.Draw("PSAME")
            iamTextY.Draw("SAME")

        if i == 0: canvases[i].SaveAs("%s/pfa_res_low.pdf"%(outpath))
        if i == 1: canvases[i].SaveAs("%s/pfa_res_high.pdf"%(outpath))
