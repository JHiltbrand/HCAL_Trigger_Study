# Pull raw histograms from root files generated by ratioStudyPlotter and make final plots

# An example call would be:
# python studies/finalRatioPlots.py --pfaY subpath/to/nominal --pfaX1 subpath/to/new

# Here the subpath is assumed to start in nobackup/HCAL_Trigger_Study/input/Ratios/

import sys, os, ROOT, argparse

ROOT.TH1.SetDefaultSumw2()
ROOT.TH2.SetDefaultSumw2()
ROOT.gROOT.SetBatch(True)
ROOT.gStyle.SetOptStat("")
ROOT.gStyle.SetPaintTextFormat("3.2f")
ROOT.gStyle.SetFrameLineWidth(2)
ROOT.gStyle.SetEndErrorSize(0)

# The makeBandGraph method takes three TH1s where histoUp and histoDown
# would make an envelope around histoNominal. An optional color for the 
# band is passable
def makeBandGraph(histoUp, histoDown, histoNominal, color):
    
    npoints = histoUp.GetNbinsX()

    graphBand = ROOT.TGraphAsymmErrors(npoints)

    for iPoint in xrange(0, npoints):

        upErr = histoUp.GetBinContent(iPoint+1) - histoNominal.GetBinContent(iPoint+1)
        downErr = histoNominal.GetBinContent(iPoint+1) - histoDown.GetBinContent(iPoint+1)

        if iPoint == 28:
            graphBand.SetPoint(iPoint,      histoNominal.GetBinCenter(iPoint+1),       (histoNominal.GetBinContent(iPoint)+histoNominal.GetBinContent(iPoint+2))/2)
            graphBand.SetPointError(iPoint, histoNominal.GetBinWidth(1)/2, histoNominal.GetBinWidth(1)/2, 0, 0)

        graphBand.SetPoint(iPoint, histoNominal.GetBinCenter(iPoint+1), histoNominal.GetBinContent(iPoint+1))
        graphBand.SetPointError(iPoint, histoNominal.GetBinWidth(1)/2, histoNominal.GetBinWidth(1)/2, downErr, upErr)

    graphBand.SetFillColorAlpha(color, 1.0)

    return graphBand

# A little helper function to set axis label, title sizes and offsets
def setAxisDims(histo, xLabelSize, yLabelSize, zLabelSize, xTitleSize, yTitleSize, zTitleSize, xOffset, yOffset, zOffset):

    histo.GetXaxis().SetLabelSize(xLabelSize); histo.GetXaxis().SetTitleSize(xTitleSize); histo.GetXaxis().SetTitleOffset(xOffset)
    histo.GetYaxis().SetLabelSize(yLabelSize); histo.GetYaxis().SetTitleSize(yTitleSize); histo.GetYaxis().SetTitleOffset(yOffset)
    
    try:
        histo.GetZaxis().SetLabelSize(zLabelSize); histo.GetZaxis().SetTitleSize(zTitleSize); histo.GetZaxis().SetTitleOffset(zOffset)
    except:
        return

# A helper function to set all three axis ranges
def setAxisRanges(histo, xMin = -1, xMax = -1, yMin = -1, yMax = -1, zMin = -1, zMax = -1):

    if xMin != xMax: histo.GetXaxis().SetRangeUser(xMin, xMax)
    if yMin != yMax: histo.GetYaxis().SetRangeUser(yMin, yMax)
    if zMin != zMax: histo.GetZaxis().SetRangeUser(zMin, zMax)

# A function to set some TH1 options
def set1Doptions(histo, fillColor = -1, lineColor = ROOT.kBlack, markerColor = ROOT.kBlack, lineStyle = 1, markerStyle = 20, lineWidth = 5, markerSize = 3, normalize = False):

    histo.SetLineColor(lineColor)
    histo.SetLineStyle(lineStyle)
    histo.SetLineWidth(lineWidth)

    histo.SetMarkerColor(markerColor)
    histo.SetMarkerStyle(markerStyle)
    histo.SetMarkerSize(markerSize)

    if fillColor != -1: histo.SetFillColor(fillColor)

    if normalize: histo.Scale(1.0/histo.Integral())

# A function to set some TH2 options
def set2Doptions(histo, contour = 255):

    if "TH2" not in histo.ClassName(): return

    histo.SetContour(255)

# Take a TPaveText box and customize it accordingly
def prettyText(text, color, algoName, mean, stddev):

    text.SetFillColor(ROOT.kWhite);
    text.SetTextAlign(11)
    text.AddText(algoName)
    text.AddText("#mu = %3.2f"%(mean))
    text.AddText("#sigma = %3.2f"%(stddev))
    text.SetTextAlign(11)
    text.SetTextFont(63)
    text.SetTextSize(72)
    text.SetTextColor(color)

# The fillMap method has inputs pfaKey which will be a key in a dictionary and inRootDir which is a path to 
# histogram files
def fillMap(pfaKey, inRootDir):

    if "NULL" in inRootDir: return

    MAPPFAHISTOS[pfaKey] = {}

    for histoFile in os.listdir(inRootDir):

       if ".root" not in histoFile: continue
       histoFile = ROOT.TFile.Open(inRootDir + "/" + histoFile, "READ")
       for hkey in histoFile.GetListOfKeys():
           if "TH" not in hkey.GetClassName(): continue

           name = hkey.GetName()
           histo = hkey.ReadObj()
           histo.SetName(name + "_" + pfaKey)

           histo.Sumw2()
           
           if name in MAPPFAHISTOS[pfaKey].keys(): MAPPFAHISTOS[pfaKey][name].Add(histo)
           else: 
               histo.SetDirectory(0)
               ROOT.SetOwnership(histo, False)

               MAPPFAHISTOS[pfaKey][name] = histo

# Using the nominal histogram and its up and down variation, create an error band
def getUncertaintyBand(histo, histoUp, histoDown, fillColor):

    gPFAXBand = 0
    if histoUp != 0 and histoDown != 0:

        pPFAX     = histo.ProfileX("p_%s_%d_ub"%(histo.GetName(),histo.GetUniqueID()), 1, -1, "");             pPFAX.Sumw2()
        pPFAXUp   = histoUp.ProfileX("p_%s_%d_ub"%(histoUp.GetName(),histoUp.GetUniqueID()), 1, -1, "");       pPFAXUp.Sumw2()
        pPFAXDown = histoDown.ProfileX("p_%s_%d_ub"%(histoDown.GetName(),histoDown.GetUniqueID()), 1, -1, ""); pPFAXDown.Sumw2()

        gPFAXBand = makeBandGraph(pPFAXUp, pPFAXDown, pPFAX, fillColor)

        set1Doptions(gPFAXBand, lineWidth = 3, lineColor = fillColor, markerColor = fillColor, markerSize = 0)
           
        if gPFAXBand: ROOT.SetOwnership(gPFAXBand, False)

    return gPFAXBand

# The method for 1D histos is the draw1DHisto method. Here the 1D histogram
# is prettied up and added to a THStack. In addition, we use parameters of the 1D
# histogram to make a custom TPaveText and return it.
def draw1DHisto(theStack, histo, histoUp, histoDown, color, markerStyle):

    mean   = histo.GetMean()
    stddev = histo.GetStdDev()

    stddevUp = 0.; stddevDown = 0.;
    if histoUp != 0 and histoDown != 0:
        stddevUp = histoUp.GetStdDev()
        stddevDown = histoDown.GetStdDev()

    setAxisDims(histo, 0.042, 0.042, 0.042, 0.052, 0.052, 0.052, 1.06, 1.2, 1.0)
    set1Doptions(histo, lineColor = color, markerStyle = markerStyle, markerSize = 0, normalize = True)

    theStack.Add(histo)
    theStack.GetXaxis().SetTitle(histo.GetXaxis().GetTitle())
    theStack.GetYaxis().SetTitle(histo.GetYaxis().GetTitle())

    return stddev, stddevUp, stddevDown, mean

if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument("--tag"      , dest="tag"      , type=str, default=""    , help="Unique tag for output")
    parser.add_argument("--pfaY"     , dest="pfaY"     , type=str, default="NULL", help="Subpath to inputs for PFAY")
    parser.add_argument("--pfaX1"    , dest="pfaX1"    , type=str, default="NULL", help="Subpath to other PFAX dir") 
    parser.add_argument("--pfaX2"    , dest="pfaX2"    , type=str, default="NULL", help="Subpath to other PFAX dir") 
    parser.add_argument("--pfaX3"    , dest="pfaX3"    , type=str, default="NULL", help="Subpath to other PFAX dir") 
    parser.add_argument("--pfaX1Err" , dest="pfaX1Err" , default=False, action="store_true", help="Draw error bands for PFAX") 
    parser.add_argument("--pfaX2Err" , dest="pfaX2Err" , default=False, action="store_true", help="Draw error bands for PFAX") 
    parser.add_argument("--pfaX3Err" , dest="pfaX3Err" , default=False, action="store_true", help="Draw error bands for PFAX") 
    args = parser.parse_args()

    tag = args.tag
    
    MAPPFAHISTOS = {}
    schemeMap = {}
    stub = ""

    HOME = os.getenv("HOME")
    OUTBASE  = "%s/nobackup/HCAL_Trigger_Study/plots/Ratios"%(HOME)
    INPUTLOC = "%s/nobackup/HCAL_Trigger_Study/input/Ratios"%(HOME)

    # The only place we hard code the options is here. This will allow us to set colors of histo lines
    # markers, fill etc.
    if args.pfaX1 != "NULL":
        stub = args.pfaX1.split("Ratios/")[-1]
        schemeMap.setdefault("PFAX1", {}).setdefault("path", args.pfaX1)
        schemeMap["PFAX1"]["scheme"] = "PFA" + args.pfaX1.split("PFA")[-1].split("_")[0]
        schemeMap["PFAX1"]["mcolor"] = ROOT.kBlack
        schemeMap["PFAX1"]["lcolor"] = ROOT.kBlack
        schemeMap["PFAX1"]["bmcolor"] = ROOT.kBlack
        schemeMap["PFAX1"]["blcolor"] = ROOT.kBlack
        schemeMap["PFAX1"]["fcolor"] = ROOT.kRed
        schemeMap["PFAX1"]["style"] = 20
        schemeMap["PFAX1"]["resLow"] = ROOT.TGraphAsymmErrors(28) 
        schemeMap["PFAX1"]["resHigh"] = ROOT.TGraphAsymmErrors(28) 
        schemeMap["PFAX1"]["resLowBand"] = ROOT.TGraphAsymmErrors(28) 
        schemeMap["PFAX1"]["resHighBand"] = ROOT.TGraphAsymmErrors(28) 

        fillMap("PFAX1", INPUTLOC + "/" + args.pfaX1)

        if args.pfaX1Err:
            fillMap("PFAX1Up"  , INPUTLOC + "/" + args.pfaX1 + "_UP"  )
            fillMap("PFAX1Down", INPUTLOC + "/" + args.pfaX1 + "_DOWN")
            schemeMap["PFAX1"]["error"] = True 
        else:
            schemeMap["PFAX1"]["error"] = False

    if args.pfaX2 != "NULL":
        stub = args.pfaX2.split("Ratios/")[-1]
        schemeMap.setdefault("PFAX2", {}).setdefault("path", args.pfaX2)
        schemeMap["PFAX2"]["scheme"] = "PFA" + args.pfaX2.split("PFA")[-1].split("_")[0]
        schemeMap["PFAX2"]["mcolor"] = ROOT.kRed
        schemeMap["PFAX2"]["lcolor"] = ROOT.kRed
        schemeMap["PFAX2"]["bmcolor"] = ROOT.kBlack
        schemeMap["PFAX2"]["blcolor"] = ROOT.kBlack
        schemeMap["PFAX2"]["fcolor"] = ROOT.kGray+2
        schemeMap["PFAX2"]["style"] = 20
        schemeMap["PFAX2"]["resLow"] = ROOT.TGraphAsymmErrors(28) 
        schemeMap["PFAX2"]["resHigh"] = ROOT.TGraphAsymmErrors(28)
        schemeMap["PFAX2"]["resLowBand"] = ROOT.TGraphAsymmErrors(28) 
        schemeMap["PFAX2"]["resHighBand"] = ROOT.TGraphAsymmErrors(28)

        fillMap("PFAX2", INPUTLOC + "/" + args.pfaX2)

        if args.pfaX2Err:              
            fillMap("PFAX2Up"  , INPUTLOC + "/" + args.pfaX2 + "_UP"  )
            fillMap("PFAX2Down", INPUTLOC + "/" + args.pfaX2 + "_DOWN")
            schemeMap["PFAX2"]["error"] = True 
        else:
            schemeMap["PFAX2"]["error"] = False

    if args.pfaX3 != "NULL":
        stub = args.pfaX3.split("Ratios/")[-1]
        schemeMap.setdefault("PFAX3", {}).setdefault("path", args.pfaX3)
        schemeMap["PFAX3"]["scheme"] = "PFA" + args.pfaX3.split("PFA")[-1].split("_")[0]
        schemeMap["PFAX3"]["mcolor"] = ROOT.kBlue+1
        schemeMap["PFAX3"]["lcolor"] = ROOT.kBlue+1
        schemeMap["PFAX3"]["bmcolor"] = ROOT.kBlue+1
        schemeMap["PFAX3"]["blcolor"] = ROOT.kBlue+1
        schemeMap["PFAX3"]["fcolor"] = ROOT.kBlue+1
        schemeMap["PFAX3"]["style"] = 20
        schemeMap["PFAX3"]["resLow"] = ROOT.TGraphAsymmErrors(28) 
        schemeMap["PFAX3"]["resHigh"] = ROOT.TGraphAsymmErrors(28)
        schemeMap["PFAX3"]["resLowBand"] = ROOT.TGraphAsymmErrors(28) 
        schemeMap["PFAX3"]["resHighBand"] = ROOT.TGraphAsymmErrors(28)

        fillMap("PFAX3", INPUTLOC + "/" + args.pfaX3)

        if args.pfaX3Err:              
            fillMap("PFAX3Up"  , INPUTLOC + "/" + args.pfaX3 + "_UP"  )
            fillMap("PFAX3Down", INPUTLOC + "/" + args.pfaX3 + "_DOWN")
            schemeMap["PFAX3"]["error"] = True 
        else:
            schemeMap["PFAX3"]["error"] = False

    if args.pfaY != "NULL":
        stub = args.pfaY.split("Ratios/")[-1]
        schemeMap.setdefault("PFAY", {}).setdefault("path", args.pfaY)
        schemeMap["PFAY"]["scheme"] = "PFA" + args.pfaY.split("PFA")[-1].split("_")[0]
        schemeMap["PFAY"]["mcolor"] = ROOT.kGray+2
        schemeMap["PFAY"]["lcolor"] = ROOT.kGray+2
        schemeMap["PFAY"]["fcolor"] = ROOT.kGray+2
        schemeMap["PFAY"]["style"] = 4 
        schemeMap["PFAY"]["resLow"] = ROOT.TGraphAsymmErrors(28) 
        schemeMap["PFAY"]["resHigh"] = ROOT.TGraphAsymmErrors(28)
        schemeMap["PFAY"]["resLowBand"] = ROOT.TGraphAsymmErrors(28) 
        schemeMap["PFAY"]["resHighBand"] = ROOT.TGraphAsymmErrors(28)

        fillMap("PFAY" , INPUTLOC + "/" + args.pfaY)

        schemeMap["PFAY"]["error"] = False

    # Set up the output directory and make it if it does not exist
    outpath = "%s/%s/%s"%(OUTBASE,stub,tag)
    if not os.path.exists(outpath): os.makedirs(outpath)

    # Use a dummy histo to draw the TGraphAsymmErrors on later
    pfaResHistDummy  = ROOT.TH1F("pfaResHistDummy", ";|i#eta|;#sigma(online / offline)", 28, 0.5, 28.5)
    setAxisDims(pfaResHistDummy, 0.059, 0.059, 0.059, 0.072, 0.072, 0.072, 0.85, 0.85, 1.0)
    setAxisRanges(pfaResHistDummy, yMin = 0.0, yMax = 0.7)

    # Determine if we will be drawing uncertainty bands
    # This will modify how we draw things later on
    withUncertaintyBand = False
    for scheme, options in schemeMap.iteritems(): withUncertaintyBand |= options["error"]

    # Begin the main loop to loop over the histogram names
    # And draw the results for the provided schemes together
    # Discriminate whether drawing TH2 or TH1
    mapNameToHisto = MAPPFAHISTOS.values()[0]
    for name in mapNameToHisto.keys():

        className = mapNameToHisto[name].ClassName()

        if "TH2" in className:

            ROOT.gStyle.SetErrorX(0.5)

            c1 = ROOT.TCanvas("%s"%(name), "%s"%(name), 2400, 1440); c1.cd(); c1.SetLogz()

            ROOT.gPad.SetTopMargin(0.026)
            ROOT.gPad.SetBottomMargin(0.15)
            ROOT.gPad.SetLeftMargin(0.11)
            ROOT.gPad.SetRightMargin(0.12)

            # Loop over each scheme to gets its corresponding histo
            # for the current histo name
            # Collect 2D histos, profiles and graph bands together so they
            # can be drawn in the correct order
            lBegin = 0; lEnd = 0
            ratios = []; profiles = []; bands = []
            for scheme, options in sorted(schemeMap.iteritems()):

                # Tries are cheap, use them to check for nested dictionary key 
                hPFA = 0
                try: hPFA = MAPPFAHISTOS[scheme][name]
                except: continue

                hPFAUp = 0; hPFADown = 0;
                if options["error"]:
                    hPFAUp   = MAPPFAHISTOS[scheme + "Up"][name]
                    hPFADown = MAPPFAHISTOS[scheme + "Down"][name]

                # Very careful now, take the profile before cutting off the y range!
                profile = hPFA.ProfileX("p_%s_%d"%(hPFA.GetName(),hPFA.GetUniqueID()), 1, -1, ""); ROOT.SetOwnership(profile, False); profile.Sumw2()

                band = getUncertaintyBand(hPFA, hPFAUp, hPFADown, options["fcolor"])
                bands.append(band)

                # Start setting pretty drawing options for the 2D histo itself
                setAxisDims(hPFA, 0.059, 0.059, 0.059, 0.072, 0.072, 0.072, 0.95, 0.72, 1.0)
                setAxisRanges(hPFA, yMin = 0.1, yMax = 2.0, zMin = 1, zMax = 8e4)
            
                # Depending on the variable being plotted choose the range differently
                if "ET_" in hPFA.GetName(): setAxisRanges(hPFA, xMin = 0, xMax = 30)
                if "r4"  in hPFA.GetName(): setAxisRanges(hPFA, yMin = 0, yMax = 1.1)
            
                set2Doptions(hPFA, contour = 255)

                ratios.append(hPFA)

                # Here we decide the style options if we have an uncertainty band or not
                if withUncertaintyBand: set1Doptions(profile, lineWidth = 1, markerColor = options["bmcolor"], lineColor = options["blcolor"], markerStyle = options["style"], markerSize = 2)
                else:                   set1Doptions(profile, lineWidth = 0, markerColor = options["mcolor"], markerStyle = options["style"])

                profiles.append(profile)

                first = hPFA.GetXaxis().GetBinLowEdge(hPFA.GetXaxis().GetFirst()); last = hPFA.GetXaxis().GetBinUpEdge(hPFA.GetXaxis().GetLast())
        
            l = ROOT.TLine(lBegin, 1, lEnd, 1) 
            l.SetLineWidth(3)
            l.SetLineColor(ROOT.kBlack)
            l.SetLineStyle(2)

            c1.cd()

            # Only draw first 2D histo in list
            ratios[0].Draw("COLZ")

            # Draw error bands next (if any)
            for band in reversed(bands):
                if band != 0: band.Draw("2SAME")

            # Finally draw profiles on top of everything
            for profile in profiles:
                if profile != 0: profile.Draw("EP SAME")

            l.DrawLine(first, 1, last, 1)
    
            c1.SaveAs("%s/%s.pdf"%(outpath,name))

        # 1D histos assumed to be a distribution of a user variable for a given ieta
        elif "TH1" in className:

            c1 = ROOT.TCanvas("%s"%(name), "%s"%(name), 1600, 1600); c1.cd(); c1.SetGridy(); c1.SetGridx()

            ROOT.gPad.SetTopMargin(0.02)
            ROOT.gPad.SetBottomMargin(0.12)
            ROOT.gPad.SetLeftMargin(0.14)
            ROOT.gPad.SetRightMargin(0.02)

            theStack = ROOT.THStack("theStack_%s"%(name), ""); theStack.Draw()

            ietaList = name.split("ieta")[-1].split("_")[0].split("to"); ieta = int(ietaList[0])
            skipRes = False; ietaStr = ""
            if len(ietaList) > 1:
                skipRes = True
                ietaStr = "%s to %s"%(ietaList[0],ietaList[1])
            else:
                ietaStr = "%s"%(ietaList[0])

            etBinLow  = "RHET0.0to10.0"  in name and "TPRH" in name and "TPETgt0.5" in name
            etBinHigh = ("RHET10.0to1000" in name or "RHET10.0toInf" in name) and "TPRH" in name and "TPETgt0.5" in name

            textYstart = 0.85; textYinc = 0.18
            textXstart = 0.75

            ietaText = ROOT.TPaveText(textXstart-0.03, 0.86, textXstart+0.17, textYstart+0.1, "trNDC")
            ietaText.SetFillColor(ROOT.kWhite); ietaText.SetTextAlign(11); ietaText.SetTextFont(63); ietaText.SetTextSize(80)
            ietaText.AddText("|i#eta| = %s"%(ietaStr))

            textList = []
            for scheme, options in schemeMap.iteritems():
                if name not in MAPPFAHISTOS[scheme]: continue

                hPFA = MAPPFAHISTOS[scheme][name]
                hPFAUp = 0; hPFADown = 0;
                if options["error"]:
                    hPFAUp   = MAPPFAHISTOS[scheme + "Up"][name]
                    hPFADown = MAPPFAHISTOS[scheme + "Down"][name]

                pfares, pfaresUp, pfaresDown, pfamean = draw1DHisto(theStack, hPFA, hPFAUp, hPFADown, options["mcolor"], options["style"])

                someTextPFA = ROOT.TPaveText(textXstart, textYstart-0.15, textXstart+0.17, textYstart, "trNDC")
                prettyText(someTextPFA, options["mcolor"], options["scheme"], pfamean, pfares)
                textList.append(someTextPFA)

                if not skipRes:
                    errLow = pfares-pfaresDown; errHigh = pfaresUp-pfares
                    if not options["error"]:
                        errLow = 0.
                        errHigh = 0.

                    if errLow < 0. and errHigh > 0. or errLow > 0. and errHigh < 0.:
                        if abs(errLow) >= abs(errHigh): errHigh = 0.
                        else: errLow = 0.

                    if etBinLow:
                        options["resLow"].SetPoint(ieta-1, ieta, pfares); options["resLowBand"].SetPoint(ieta-1, ieta, pfares)
                        options["resLowBand"].SetPointError(ieta-1, pfaResHistDummy.GetBinWidth(1)/2, pfaResHistDummy.GetBinWidth(1)/2, 1*(errLow), 1*(errHigh))
                        options["resLow"].SetPointError(ieta-1, pfaResHistDummy.GetBinWidth(1)/2, pfaResHistDummy.GetBinWidth(1)/2, 0, 0)

                    elif etBinHigh:
                        options["resHigh"].SetPoint(ieta-1, ieta, pfares); options["resHighBand"].SetPoint(ieta-1, ieta, pfares)
                        options["resHighBand"].SetPointError(ieta-1, pfaResHistDummy.GetBinWidth(1)/2, pfaResHistDummy.GetBinWidth(1)/2, 1*(errLow), 1*(errHigh))
                        options["resHigh"].SetPointError(ieta-1, pfaResHistDummy.GetBinWidth(1)/2, pfaResHistDummy.GetBinWidth(1)/2, 0, 0)

                textYstart -= textYinc

            setAxisDims(theStack, 0.042, 0.042, 0.042, 0.052, 0.052, 0.052, 1.06, 1.4, 1.0)
            setAxisRanges(theStack, xMin = 0.23, xMax = 2.98)

            theStack.Draw("HIST NOSTACK")

            ietaText.Draw("SAME")
            for text in textList: text.Draw("SAME")

            c1.SaveAs("%s/%s.pdf"%(outpath,name))

    # Now do resolution plots
    ROOT.gStyle.SetErrorX(0.5)

    for regime in ["resLow", "resHigh"]:

        canvas = ROOT.TCanvas("pfa_%s"%(regime), "pfa_%s"%(regime), 2400, 1440)

        canvas.cd(); canvas.SetGridy(); canvas.SetGridx()
        ROOT.gPad.SetTopMargin(0.03)
        ROOT.gPad.SetBottomMargin(0.14)
        ROOT.gPad.SetLeftMargin(0.13)
        ROOT.gPad.SetRightMargin(0.03)
       
        pfaResHistDummy.Draw("")

        textYstart = 0.93; textXstart = 0.8
        graphs = []; bands = []; texts = []
        for scheme, options in schemeMap.iteritems():

            iamText = ROOT.TPaveText(textXstart-0.1, textYstart-0.06, textXstart, textYstart, "trNDC"); iamText.SetFillColor(ROOT.kWhite); iamText.SetTextAlign(12); iamText.SetTextFont(63); iamText.SetTextSize(90)
            iamText.AddText(options["scheme"])
            iamText.SetTextColor(options["mcolor"])
            texts.append(iamText)

            if scheme in MAPPFAHISTOS:

                drawOption = ""
                if withUncertaintyBand: 
                    set1Doptions(options[regime], lineWidth = 1, fillColor = options["fcolor"], lineColor = options["blcolor"], markerSize = 2, markerColor = options["bmcolor"])
                    set1Doptions(options[regime+"Band"], lineWidth = 1, fillColor = options["fcolor"], lineColor = options["blcolor"], markerSize = 2, markerColor = options["bmcolor"])
                    graphs.append(options[regime])
                    bands.append(options[regime+"Band"])
                    
                else:
                    set1Doptions(options[regime], lineWidth = 3, lineColor = options["lcolor"], markerSize = 4, markerColor = options["mcolor"])
                    set1Doptions(options[regime+"Band"], lineWidth = 3, lineColor = options["lcolor"], markerSize = 4, markerColor = options["mcolor"])
                    graphs.append(options[regime])
                    bands.append(options[regime+"Band"])

                #textYstart -= 0.09

        # Draw the uncertainty bands first
        for band in bands: band.Draw("2SAME")

        # Then draw the actual graphs on top
        for graph in graphs: graph.Draw("PSAME")

        # Finally, draw the text boxes
        for text in texts: text.Draw("SAME")

        canvas.SaveAs("%s/pfa_%s.pdf"%(outpath,regime))
